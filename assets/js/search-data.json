{
  
    
        "post0": {
            "title": "Logistic Regression on titanic dataset",
            "content": "1. Problem Statement . The goal is to predict survival of passengers travelling in RMS Titanic using Logistic regression. . . 2. Data Loading and Description . . The dataset consists of the information about people boarding the famous RMS Titanic. Various variables present in the dataset includes data of age, sex, fare, ticket etc. | The dataset comprises of 891 observations of 12 columns. Below is a table showing names of all the columns and their description. | . Column Name Description . PassengerId | Passenger Identity | . Survived | Whether passenger survived or not | . Pclass | Class of ticket | . Name | Name of passenger | . Sex | Sex of passenger | . Age | Age of passenger | . SibSp | Number of sibling and/or spouse travelling with passenger | . Parch | Number of parent and/or children travelling with passenger | . Ticket | Ticket number | . Fare | Price of ticket | . Cabin | Cabin number | . Importing packages . import numpy as np # Implemennts milti-dimensional array and matrices import pandas as pd # For data manipulation and analysis # import pandas_profiling import matplotlib.pyplot as plt # Plotting library for Python programming language and it&#39;s numerical mathematics extension NumPy import seaborn as sns # Provides a high level interface for drawing attractive and informative statistical graphics %matplotlib inline sns.set() from subprocess import check_output . Importing the Dataset . titanic_data = pd.read_csv(&quot;LogReg/titanic_train.csv&quot;) # Importing training dataset using pd.read_csv . . 3. Preprocessing the data . Dealing with missing values Dropping/Replacing missing entries of Embarked. | Replacing missing values of Age and Fare with median values. | Dropping the column &#39;Cabin&#39; as it has too many null values. | . | . titanic_data.Embarked = titanic_data.Embarked.fillna(titanic_data[&#39;Embarked&#39;].mode()[0]) . median_age = titanic_data.Age.median() median_fare = titanic_data.Fare.median() titanic_data.Age.fillna(median_age, inplace = True) titanic_data.Fare.fillna(median_fare, inplace = True) . titanic_data.drop(&#39;Cabin&#39;, axis = 1,inplace = True) . Creating a new feature named FamilySize. | . titanic_data[&#39;FamilySize&#39;] = titanic_data[&#39;SibSp&#39;] + titanic_data[&#39;Parch&#39;]+1 . Segmenting Sex column as per Age, Age less than 15 as Child, Age greater than 15 as Males and Females as per their gender. | . titanic_data[&#39;GenderClass&#39;] = titanic_data.apply(lambda x: &#39;child&#39; if x[&#39;Age&#39;] &lt; 15 else x[&#39;Sex&#39;],axis=1) . titanic_data[titanic_data.Age&lt;15].head(2) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Embarked FamilySize GenderClass . 7 8 | 0 | 3 | Palsson, Master. Gosta Leonard | male | 2.0 | 3 | 1 | 349909 | 21.0750 | S | 5 | child | . 9 10 | 1 | 2 | Nasser, Mrs. Nicholas (Adele Achem) | female | 14.0 | 1 | 0 | 237736 | 30.0708 | C | 2 | child | . titanic_data[titanic_data.Age&gt;15].head(2) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Embarked FamilySize GenderClass . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | S | 2 | male | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C | 2 | female | . Dummification of GenderClass &amp; Embarked. | . titanic_data = pd.get_dummies(titanic_data, columns=[&#39;GenderClass&#39;,&#39;Embarked&#39;], drop_first=True) . Dropping columns &#39;Name&#39; , &#39;Ticket&#39; , &#39;Sex&#39; , &#39;SibSp&#39; and &#39;Parch&#39; | . titanic = titanic_data.drop([&#39;Name&#39;,&#39;Ticket&#39;,&#39;Sex&#39;,&#39;SibSp&#39;,&#39;Parch&#39;], axis = 1) titanic.head() . PassengerId Survived Pclass Age Fare FamilySize GenderClass_female GenderClass_male Embarked_Q Embarked_S . 0 1 | 0 | 3 | 22.0 | 7.2500 | 2 | 0 | 1 | 0 | 1 | . 1 2 | 1 | 1 | 38.0 | 71.2833 | 2 | 1 | 0 | 0 | 0 | . 2 3 | 1 | 3 | 26.0 | 7.9250 | 1 | 1 | 0 | 0 | 1 | . 3 4 | 1 | 1 | 35.0 | 53.1000 | 2 | 1 | 0 | 0 | 1 | . 4 5 | 0 | 3 | 35.0 | 8.0500 | 1 | 0 | 1 | 0 | 1 | . Drawing pair plot to know the joint relationship between &#39;Fare&#39; , &#39;Age&#39; , &#39;Pclass&#39; &amp; &#39;Survived&#39; . sns.pairplot(titanic_data[[&quot;Fare&quot;,&quot;Age&quot;,&quot;Pclass&quot;,&quot;Survived&quot;]],vars = [&quot;Fare&quot;,&quot;Age&quot;,&quot;Pclass&quot;],hue=&quot;Survived&quot;, dropna=True,markers=[&quot;o&quot;, &quot;s&quot;]) plt.title(&#39;Pair Plot&#39;) . Text(0.5, 1, &#39;Pair Plot&#39;) . Observing the diagonal elements, . More people of Pclass 1 survived than died (First peak of red is higher than blue) | More people of Pclass 3 died than survived (Third peak of blue is higher than red) | More people of age group 20-40 died than survived. | Most of the people paying less fare died. | . Establishing coorelation between all the features using heatmap. . corr = titanic_data.corr() plt.figure(figsize=(10,10)) sns.heatmap(corr,vmax=.8,linewidth=.01, square = True, annot = True,cmap=&#39;YlGnBu&#39;,linecolor =&#39;black&#39;) plt.title(&#39;Correlation between features&#39;) . Text(0.5, 1, &#39;Correlation between features&#39;) . Age and Pclass are negatively corelated with Survived. | FamilySize is made from Parch and SibSb only therefore high positive corelation among them. | Fare and FamilySize are positively coorelated with Survived. | With high corelation we face redundancy issues. | . . 4. Logistic Regression . . 4.1 Introduction to Logistic Regression . Logistic regression is a techinque used for solving the classification problem. And Classification is nothing but a problem of identifing to which of a set of categories a new observation belongs, on the basis of training dataset containing observations (or instances) whose categorical membership is known. For example to predict: Whether an email is spam (1) or not (0) or, Whether the tumor is malignant (1) or not (0) Below is the pictorial representation of a basic logistic regression model to classify set of images into happy or sad. . Both Linear regression and Logistic regression are supervised learning techinques. But for the Regression problem the output is continuous unlike the classification problem where the output is discrete. . Logistic Regression is used when the dependent variable(target) is categorical. | Sigmoid function or logistic function is used as hypothesis function for logistic regression. Below is a figure showing the difference between linear regression and logistic regression, Also notice that logistic regression produces a logistic curve, which is limited to values between 0 and 1. | . . 4.2 Mathematics behind Logistic Regression . The odds for an event is the (probability of an event occuring) / (probability of event not occuring): For Linear regression: continuous response is modeled as a linear combination of the features: y = β0 + β1x For Logistic regression: log-odds of a categorical response being &quot;true&quot; (1) is modeled as a linear combination of the features: . This is called the logit function. On solving for probability (p) you will get: . . . Shown below is the plot showing linear model and logistic model: . . In other words: . Logistic regression outputs the probabilities of a specific class. | Those probabilities can be converted into class predictions. | . The logistic function has some nice properties: . Takes on an &quot;s&quot; shape | Output is bounded by 0 and 1 | . We have covered how this works for binary classification problems (two response classes). But what about multi-class classification problems (more than two response classes)? . Most common solution for classification models is &quot;one-vs-all&quot; (also known as &quot;one-vs-rest&quot;): decompose the problem into multiple binary classification problems. | Multinomial logistic regression can solve this as a single problem. | . . 4.3 Applications of Logistic Regression . Logistic Regression was used in biological sciences in early twentieth century. It was then used in many social science applications. For instance, . The Trauma and Injury Severity Score (TRISS), which is widely used to predict mortality in injured patients, was originally developed by Boyd et al. using logistic regression. | Many other medical scales used to assess severity of a patient have been developed using logistic regression. | Logistic regression may be used to predict the risk of developing a given disease (e.g. diabetes; coronary heart disease), based on observed characteristics of the patient (age, sex, body mass index, results of various blood tests, etc.). | . Now a days, Logistic Regression have the following applications . Image segementation and categorization | Geographic image processing | Handwriting recognition | Detection of myocardinal infarction | Predict whether a person is depressed or not based on a bag of words from corpus. | The reason why logistic regression is widely used despite of the state of the art of deep neural network is that logistic regression is very efficient and does not require too much computational resources, which makes it affordable to run on production. . . 4.4 Preparing X and y using pandas . X = titanic.loc[:,titanic.columns != &#39;Survived&#39;] X.head() . PassengerId Pclass Age Fare FamilySize GenderClass_female GenderClass_male Embarked_Q Embarked_S . 0 1 | 3 | 22.0 | 7.2500 | 2 | 0 | 1 | 0 | 1 | . 1 2 | 1 | 38.0 | 71.2833 | 2 | 1 | 0 | 0 | 0 | . 2 3 | 3 | 26.0 | 7.9250 | 1 | 1 | 0 | 0 | 1 | . 3 4 | 1 | 35.0 | 53.1000 | 2 | 1 | 0 | 0 | 1 | . 4 5 | 3 | 35.0 | 8.0500 | 1 | 0 | 1 | 0 | 1 | . y = titanic.Survived . . 4.5 Splitting X and y into training and test datasets. . from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1) . print(X_train.shape) print(y_train.shape) . (712, 9) (712,) . . 4.6 Logistic regression in scikit-learn . To apply any machine learning algorithm on your dataset, basically there are 4 steps: . Load the algorithm | Instantiate and Fit the model to the training dataset | Prediction on the test set | Calculating the accuracy of the model | The code block given below shows how these steps are carried out: . from sklearn.linear_model import LogisticRegression logreg = LogisticRegression() logreg.fit(X_train, y_train) accuracy_score(y_test,y_pred_test)) . from sklearn.linear_model import LogisticRegression logreg = LogisticRegression() logreg.fit(X_train,y_train) . C: Users prata AppData Roaming Python Python37 site-packages sklearn linear_model least_angle.py:35: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations eps=np.finfo(np.float).eps, C: Users prata AppData Roaming Python Python37 site-packages sklearn linear_model least_angle.py:597: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations eps=np.finfo(np.float).eps, copy_X=True, fit_path=True, C: Users prata AppData Roaming Python Python37 site-packages sklearn linear_model least_angle.py:836: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations eps=np.finfo(np.float).eps, copy_X=True, fit_path=True, C: Users prata AppData Roaming Python Python37 site-packages sklearn linear_model least_angle.py:862: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations eps=np.finfo(np.float).eps, positive=False): C: Users prata AppData Roaming Python Python37 site-packages sklearn linear_model least_angle.py:1097: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps, C: Users prata AppData Roaming Python Python37 site-packages sklearn linear_model least_angle.py:1344: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps, C: Users prata AppData Roaming Python Python37 site-packages sklearn linear_model least_angle.py:1480: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations eps=np.finfo(np.float).eps, copy_X=True, positive=False): C: Users prata AppData Roaming Python Python37 site-packages sklearn linear_model randomized_l1.py:152: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations precompute=False, eps=np.finfo(np.float).eps, C: Users prata AppData Roaming Python Python37 site-packages sklearn linear_model randomized_l1.py:320: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations eps=np.finfo(np.float).eps, random_state=None, C: Users prata AppData Roaming Python Python37 site-packages sklearn linear_model randomized_l1.py:580: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations eps=4 * np.finfo(np.float).eps, n_jobs=None, C: Users prata AppData Roaming Python Python37 site-packages sklearn linear_model logistic.py:433: FutureWarning: Default solver will be changed to &#39;lbfgs&#39; in 0.22. Specify a solver to silence this warning. FutureWarning) . LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True, intercept_scaling=1, max_iter=100, multi_class=&#39;warn&#39;, n_jobs=None, penalty=&#39;l2&#39;, random_state=None, solver=&#39;warn&#39;, tol=0.0001, verbose=0, warm_start=False) . . 4.7 Using the Model for Prediction . y_pred_train = logreg.predict(X_train) . C: Users prata AppData Roaming Python Python37 site-packages sklearn linear_model base.py:283: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations indices = (scores &gt; 0).astype(np.int) . y_pred_test = logreg.predict(X_test) # make predictions on the testing set . C: Users prata AppData Roaming Python Python37 site-packages sklearn linear_model base.py:283: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations indices = (scores &gt; 0).astype(np.int) . We need an evaluation metric in order to compare our predictions with the actual values. | . . 5. Model evaluation . Error is the deviation of the values predicted by the model with the true values. We will use accuracy score and confusion matrix for evaluation. . . 5.1 Model Evaluation using accuracy classification score . from sklearn.metrics import accuracy_score print(&#39;Accuracy score for test data is:&#39;, accuracy_score(y_test,y_pred_test)) . Accuracy score for test data is: 0.7988826815642458 . . 5.2 Model Evaluation using confusion matrix . A confusion matrix is a summary of prediction results on a classification problem. . The number of correct and incorrect predictions are summarized with count values and broken down by each class. Below is a diagram showing a general confusion matrix. . from sklearn.metrics import confusion_matrix confusion_matrix = pd.DataFrame(confusion_matrix(y_test, y_pred_test)) print(confusion_matrix) . 0 1 0 95 11 1 25 48 . confusion_matrix.index = [&#39;Actual Died&#39;,&#39;Actual Survived&#39;] confusion_matrix.columns = [&#39;Predicted Died&#39;,&#39;Predicted Survived&#39;] print(confusion_matrix) . Predicted Died Predicted Survived Actual Died 95 11 Actual Survived 25 48 . This means 93 + 48 = 141 correct predictions &amp; 25 + 13 = 38 false predictions. . Adjusting Threshold for predicting Died or Survived. . In the section 4.7 we have used, .predict method for classification. This method takes 0.5 as the default threshhod for prediction. | Now, we are going to see the impact of changing threshold on the accuracy of our logistic regression model. | For this we are going to use .predict_proba method instead of using .predict method. | . Setting the threshold to 0.75 . preds1 = np.where(logreg.predict_proba(X_test)[:,1]&gt; 0.75,1,0) print(&#39;Accuracy score for test data is:&#39;, accuracy_score(y_test,preds1)) . Accuracy score for test data is: 0.7374301675977654 . The accuracy have been reduced significantly changing from 0.79 to 0.73. Hence, 0.75 is not a good threshold for our model. . Setting the threshold to 0.25 . preds2 = np.where(logreg.predict_proba(X_test)[:,1]&gt; 0.25,1,0) print(&#39;Accuracy score for test data is:&#39;, accuracy_score(y_test,preds2)) . Accuracy score for test data is: 0.7486033519553073 . The accuracy have been reduced, changing from 0.79 to 0.75. Hence, 0.25 is also not a good threshold for our model. Later on we will see methods to identify the best threshold. .",
            "url": "https://udaypratapyati.github.io/MachineLearningBlogs/logistic%20regression/logreg/machinelearning/ml/datascience/2021/08/09/LogisticRegressionTitanicDataset.html",
            "relUrl": "/logistic%20regression/logreg/machinelearning/ml/datascience/2021/08/09/LogisticRegressionTitanicDataset.html",
            "date": " • Aug 9, 2021"
        }
        
    
  
    
  
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://udaypratapyati.github.io/MachineLearningBlogs/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://udaypratapyati.github.io/MachineLearningBlogs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://udaypratapyati.github.io/MachineLearningBlogs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}